// server/models/User.js (FIXED)
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const userSchema = mongoose.Schema(
Â  {
Â  Â  name: {
Â  Â  Â  type: String,
Â  Â  Â  required: true,
Â  Â  },
Â  Â  email: {
Â  Â  Â  type: String,
Â  Â  Â  required: true,
Â  Â  Â  unique: true,
Â  Â  },
Â  Â  password: {
Â  Â  Â  type: String,
Â  Â  Â  required: true,
Â  Â  },
Â  Â  piCoinsBalance: {
Â  Â  Â  type: Number,
Â  Â  Â  required: true,
Â  Â  Â  default: 0.0, // This is the coin balance for investment
Â  Â  },
Â  Â  isAdmin: {
Â  Â  Â  type: Boolean,
Â  Â  Â  required: true,
Â  Â  Â  default: false,
Â  Â  },
Â  Â  // Referral Structure
Â  Â  referralCode: {
Â  Â  Â  Â  type: String,
Â  Â  Â  Â  unique: true,
Â  Â  Â  Â  // Generated automatically on creation
Â  Â  },
Â  Â  referredBy: {
Â  Â  Â  Â  type: mongoose.Schema.Types.ObjectId,
Â  Â  Â  Â  ref: 'User',
Â  Â  Â  Â  default: null, // Null if not referred by anyone
Â  Â  },
Â  Â  referrals: [ // List of users they have referred
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  type: mongoose.Schema.Types.ObjectId,
Â  Â  Â  Â  Â  Â  ref: 'User',
Â  Â  Â  Â  },
Â  Â  ],
Â  },
Â  {
Â  Â  timestamps: true, // Adds createdAt and updatedAt fields
Â  }
);

// Middleware to hash the password before saving (pre-save hook)
userSchema.pre('save', async function (next) {
Â  if (!this.isModified('password')) {
Â  Â  // ðŸš¨ FIX 1: Add return to exit the middleware chain immediately
Â  Â  return next();
Â  }
Â  const salt = await bcrypt.genSalt(10);
Â  this.password = await bcrypt.hash(this.password, salt);
Â  
Â  // ðŸš¨ FIX 2: Call next() here to proceed with the save operation
Â  next();
});

// Method to compare entered password with hashed password
userSchema.methods.matchPassword = async function (enteredPassword) {
Â  return await bcrypt.compare(enteredPassword, this.password);
};

const User = mongoose.model('User', userSchema);

export default User;